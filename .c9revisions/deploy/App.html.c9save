{"ts":1377112251064,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1377112257870,"patch":[[{"diffs":[[1,"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<!-- Copyright (c) 2012 Rally Software Development Corp. All rights reserved -->\n<html>\n<head>\n  <title>Planned vs Actual Burndown</title>\n  <meta name=\"Name\" content=\"App: Planned vs Actual Burndown\" />\n  <meta name=\"Version\" content=\"2012.11.19\" />\n  <meta name=\"Vendor\" content=\"Rally Software\" />\n\n  <script type =\"text/javascript\" src=\"https://rally1.rallydev.com/apps/1.32/sdk.js\"></script>\n  <script type =\"text/javascript\">\n    function PlannedVsActualBurndown() {\n        this.display = function() {\n            dojo.require(\"dojox.charting.Chart2D\");\n            var iterations = {};\n            var waiter, releaseDropdown, aggregatedTable, chart;\n    \n            var showLegend = function() {\n                dojo.byId(\"legendDiv\").innerHTML =\n                        \"<div class='blue box'></div> Actual Burndown&nbsp;&nbsp;&nbsp;<div class='green box'></div> Planned Burndown\";\n            };\n    \n            var buildLineChart = function() {\n                var labels = [];\n                var plannedBurndown = [];\n                var actualBurndownPast = [];\n                var actualBurndownFuture = [];\n                var zeros = [];\n    \n                var i = 1;\n                var futureCount = 0;\n                rally.forEach(iterations, function(value) {\n                    labels.push({value: i, text: value.Name});\n                    plannedBurndown.push(value.PlannedBurndown);\n                    if (value.IsFuture && futureCount === 0) {  // past/future plot point\n                        futureCount = 1;\n                        actualBurndownPast.push(value.ActualBurndown);\n                        actualBurndownFuture.push(value.ActualBurndown);\n                    } else if (value.IsFuture && futureCount > 0) {  // future plot points\n                        actualBurndownPast.push(null);\n                        actualBurndownFuture.push(value.ActualBurndown);\n                    } else { // past plot points\n                        actualBurndownPast.push(value.ActualBurndown);\n                        actualBurndownFuture.push(null);\n                    }\n                    zeros.push(0);\n                    i++;\n                });\n    \n                chart = new dojox.charting.Chart2D(\"lineChartDiv\");\n                chart.addPlot(\"default\", {type: \"Lines\"});\n                chart.addAxis(\"x\", {labels: labels});\n                chart.addAxis(\"y\", {vertical: true});\n                chart.addSeries(\"Planned Burndown\", plannedBurndown, {stroke: {color:\"#666666\", style: \"LongDash\"}});\n                chart.addSeries(\"Actual Burndown Past\", actualBurndownPast, {stroke: {color:\"#5C9ACB\"}});\n                chart.addSeries(\"Actual Burndown Future\", actualBurndownFuture, {stroke: {color:\"#5C9ACB\", style: \"LongDash\"}});\n                chart.addSeries(\"Zero Axis\", zeros, {stroke: {color:\"black\", width:1}});\n                chart.render();\n                chart.resize(550,300);\n    \n                showLegend();\n            };\n    \n            var populateTable = function(table) {\n                function formatDate(date) {\n                    if (date === \"\") {\n                        return \"\";\n                    }\n                    return dojo.date.locale.format(dojo.date.stamp.fromISOString(date.replace(/Z/, \"\")), {datePattern: \"yyyy-MM-dd\", selector: \"date\"});\n                }\n    \n                var i = 0;\n                rally.forEach(iterations, function(value) {\n                    var colorClass = value.IsFuture ? \"greyText\" : \"blueText\";\n                    console.log(value.ActualVelocity , value.Resources)\n                    table.setCell(i, 0, value.Name + \"(\" + value.Project + \")\");\n                    table.setCell(i, 1, formatDate(value.StartDate));\n                    table.setCell(i, 2, formatDate(value.EndDate));\n                    table.setCell(i, 3, '' + value.PlanEstimate);   // planEstimate\n                    table.setCell(i, 4, '' + value.ActualVelocity); // ActualVelocity\n                    table.setCell(i, 5, '' + value.Resources);      // PlannedVelocity\n                    //table.setCell(i, 6, '' + ( value.PlanEstimate > 0 ? Math.round( ( value.ActualVelocity / value.PlanEstimate) * 100):0));\n                    table.setCell(i, 6, '' + ( ( value.Resources != null && value.Resources > 0 ) ? Math.round( ( value.ActualVelocity / value.Resources ) * 100):0)); // %\n                    table.setCell(i, 7, \"<span class='\" + colorClass + \"'>\" + value.ActualBurndown + \"</span>\"); // ActualBurndown\n                    table.setCell(i, 8, \"<span class='greenText'>\" + value.PlannedBurndown + \"</span>\"); // PlannedBurndown\n                    i++;\n                });\n            };\n    \n            var showTable = function(releasePlanEstimate) {\n                var aggregatedTableConfig = {\n                    'sortingEnabled': false,\n                    'columnKeys'    : ['Iteration Name', 'Start Date', 'End Date', 'Plan Estimate', 'Actual Vel.', 'Planned Vel.', '%', 'Actual Burn', 'Planned Burn'],\n                    'width'         : '550px'\n                };\n                aggregatedTable = new rally.sdk.ui.Table(aggregatedTableConfig);\n                populateTable(aggregatedTable);\n                waiter.hide();\n                dojo.byId('planEstimateDiv').innerHTML = 'Release Plan Estimate: ' + releasePlanEstimate;\n                dojo.byId(\"legendDiv\").style.display = \"\";\n                dojo.byId(\"planEstimateDiv\").style.display = \"\";\n                dojo.byId(\"aggregatedDataDiv\").style.display = \"\";\n                aggregatedTable.display(\"aggregatedDataDiv\");\n    \n                buildLineChart();\n            };\n    \n            var aggregateBurndown = function(releasePlanEstimate) {\n                function getRallyDate(jsDate) {\n                    var yr = jsDate.getUTCFullYear();\n                    var mon = (\"0\" + (jsDate.getUTCMonth() + 1));\n                    var day = (\"0\" + jsDate.getUTCDate()).substr(-2);\n                    var hr = (\"0\" + jsDate.getUTCHours()).substr(-2);\n                    var min = (\"0\" + jsDate.getUTCMinutes()).substr(-2);\n                    var sec = (\"0\" + jsDate.getUTCSeconds()).substr(-2);\n    \n                    return       yr +\n                            \"-\" + mon.substr(mon.length - 2, 2) +\n                            \"-\" + day.substr(day.length - 2, 2) +\n                            \"T\" + hr + \":\" + min + \":\" + sec;\n                }\n    \n                var actualBurndown, plannedBurndown, future, lastPlannedVelocity, lastActualVelocity;\n                var today = getRallyDate(new Date());\n                var i = 1;\n    \n                rally.forEach(iterations, function(value) {\n                    if (i === 1) {                               // first iteration\n                        actualBurndown = releasePlanEstimate;\n                        plannedBurndown = releasePlanEstimate;\n                        future = value.EndDate >= today;\n                    } else if (value.Name === \"Release\") {       //release row\n                        if (future) {\n                            actualBurndown -= lastPlannedVelocity;\n                            plannedBurndown -= lastPlannedVelocity;\n                        } else {\n                            actualBurndown -= lastActualVelocity;\n                            plannedBurndown -= lastPlannedVelocity;\n                        }\n                    } else if (value.EndDate >= today) {         // future iteration\n                        actualBurndown -= lastPlannedVelocity;\n                        plannedBurndown -= lastPlannedVelocity;\n                        future = true;\n                    } else if (value.EndDate < today) {         // past iteration\n                        actualBurndown -= lastActualVelocity;\n                        plannedBurndown -= lastPlannedVelocity;\n                        future = false;\n                    }\n                    lastPlannedVelocity = value.Resources;\n                    lastActualVelocity = value.ActualVelocity;\n    \n                    iterations[value.Name].ActualBurndown = actualBurndown;\n                    iterations[value.Name].PlannedBurndown = plannedBurndown;\n                    iterations[value.Name].IsFuture = future;\n                    console.log(\"value\",value);\n                    i++;\n                });\n    \n                showTable(releasePlanEstimate);\n            };\n    \n            var aggregateData = function(results) {\n                var releasePlanEstimate = 0;\n                var allStoriesDefectsDefectSuites = results.stories;\n                allStoriesDefectsDefectSuites = allStoriesDefectsDefectSuites.concat(results.defects);\n                allStoriesDefectsDefectSuites = allStoriesDefectsDefectSuites.concat(results.defectSuites);\n    \n                dojo.forEach(allStoriesDefectsDefectSuites, function(item) { //aggregate story, defect, & defect suite data\n                    var estimate = item.PlanEstimate || 0;\n    \n                    iterations[item.Iteration.Name].PlanEstimate += estimate;\n                    releasePlanEstimate += estimate;\n                    if (item.ScheduleState === 'Accepted') {\n                        iterations[item.Iteration.Name].ActualVelocity += estimate;\n                    }\n                });\n    \n                aggregateBurndown(releasePlanEstimate);\n            };\n    \n            var makeIterationObjects = function(results) {\n                dojo.forEach(results.iterations, function(iteration) {\n                    var resources = iteration.Resources || 0;\n                    if (iterations[iteration.Name]) {\n                        resources = resources + iterations[iteration.Name].Resources;\n                    }\n    \n                    iterations[iteration.Name] = {\n                        _ref:           iteration._ref,\n                        Name:           iteration.Name ,\n                        StartDate:      iteration.StartDate,\n                        EndDate:        iteration.EndDate,\n                        Resources:      resources,\n                        PlanEstimate:   0,\n                        ActualVelocity: 0,\n                        ActualBurndown: 0,\n                        PlannedBurndown:0,\n                        IsFuture:       \"\",\n                        Project: iteration.Project.Name};\n                });\n    \n                iterations.Release = {\n                    _ref:           \"\",\n                    Name:           \"Release\",\n                    StartDate:      \"\",\n                    EndDate:        \"\",\n                    Resources:      \"\",\n                    PlanEstimate:   \"\",\n                    ActualVelocity: \"\",\n                    ActualBurndown: 0,\n                    PlannedBurndown:0,\n                    IsFuture:       \"\"};\n    \n    \n                aggregateData(results);\n            };\n    \n            function clearComponents() {\n                dojo.byId(\"legendDiv\").style.display = \"none\";\n                dojo.byId(\"planEstimateDiv\").style.display = \"none\";\n                dojo.byId(\"aggregatedDataDiv\").style.display = \"none\";\n    \n                waiter.display(\"waiter\");\n                iterations = {};\n    \n                if (chart) {\n                    chart.destroy();\n                }\n    \n                if (aggregatedTable) {\n                    aggregatedTable.destroy();\n                    aggregatedTable = null;\n                }\n            }\n    \n            function releaseSelected() {\n                clearComponents();\n    \n                var queryConfig = [];\n                var typeArray = ['hierarchicalrequirement','Defect','DefectSuite'];\n                var keyArray = ['stories','defects','defectSuites'];\n    \n                dojo.forEach(typeArray, function(query, i) {\n                    queryConfig.push({\n                        type : typeArray[i],\n                        key  : keyArray[i],\n                        query:  rally.sdk.util.Query.and(['Iteration.StartDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                            'Iteration.StartDate <= \"' + releaseDropdown.getSelectedEnd() + '\"']).or(\n                                rally.sdk.util.Query.and(['Iteration.EndDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                                    'Iteration.EndDate <= \"' + releaseDropdown.getSelectedEnd() + '\"'])),\n                        fetch: 'Name,Iteration,ScheduleState,PlanEstimate,Project'\n                    });\n                });\n    \n                queryConfig.push({\n                    type : 'Iterations',\n                    key  : 'iterations',\n                    query:  rally.sdk.util.Query.and(['StartDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                        'StartDate <= \"' + releaseDropdown.getSelectedEnd() + '\"']).or(\n                            rally.sdk.util.Query.and(['EndDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                                'EndDate <= \"' + releaseDropdown.getSelectedEnd() + '\"'])),\n                    fetch: 'Name,Resources,StartDate,EndDate,Project',\n                    order: 'EndDate'\n                });\n    \n                rallyDataSource.findAll(queryConfig, makeIterationObjects);\n            }\n    \n            rally.sdk.ui.AppHeader.setHelpTopic(\"240\");\n            rally.sdk.ui.AppHeader.showPageTools(true);\n    \n            rallyDataSource = new rally.sdk.data.RallyDataSource('__WORKSPACE_OID__',\n                    '__PROJECT_OID__',\n                    '__PROJECT_SCOPING_UP__',\n                    '__PROJECT_SCOPING_DOWN__');\n    \n            releaseDropdown = new rally.sdk.ui.ReleaseDropdown({}, rallyDataSource);\n    \n            waiter = new rally.sdk.ui.basic.Wait({hideTarget:false});\n            waiter.display(\"waiter\");\n    \n            dojo.addOnLoad(function() {  //executes when dojo requirements are loaded\n                releaseDropdown.display(\"dropdownDiv\", releaseSelected);\n            });\n        };\n    }\n  </script>\n\n  <style type=\"text/css\">\n        .box {\n        display: inline-block;\n        height: 10px;\n        width: 10px;\n    }\n    \n    .blue {\n        background-color: #5C9ACB;\n    }\n    \n    .green {\n        background-color: #666666;\n    }\n    \n    .greenText {\n        color: #666666;\n    }\n    \n    .blueText {\n        color: #5C9ACB;\n    }\n    \n    .greyText {\n        color: #999999;\n    }\n    \n    #aggregatedDataDiv,\n    #legendDiv {\n        padding-top: 10px;\n    }\n    \n    #lineChartDiv,\n    #planEstimateDiv,\n    #legendDiv,\n    #waiter {\n        width: 550px;\n    }\n    \n    #planEstimateDiv,\n    #legendDiv {\n        text-align: right;\n        font-size: 12px;\n    }\n  </style>\n\n  <script type=\"text/javascript\">\n    function onLoad() {\n      var appCustom = new PlannedVsActualBurndown();\n      appCustom.display();\n    }\n\n    rally.addOnLoad(onLoad);\n  </script>\n</head>\n\n<body>\n  <div id=\"waiter\"></div>\n  <div id=\"releaseDiv\"></div>\n  <div id=\"dropdownDiv\"></div>\n\n  <div id=\"legendDiv\"></div>\n  <div id=\"lineChartDiv\"></div>\n  <div id=\"planEstimateDiv\"></div>\n  <div id=\"aggregatedDataDiv\"></div>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":15309}]],"length":15309,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378343505001,"patch":[[{"diffs":[[0,"* 100):0));\n"],[1,"                    var value =  ( ( value.Resources != null && value.Resources > 0 ) ? Math.round( ( value.ActualVelocity / value.Resources ) * 100));\n"],[0,"            "]],"start1":4317,"start2":4317,"length1":24,"length2":176}]],"length":15461,"saved":false}
{"ts":1378343521287,"patch":[[{"diffs":[[0,") * 100)"],[1,":0"],[0,");\n     "]],"start1":4470,"start2":4470,"length1":16,"length2":18}]],"length":15463,"saved":false}
{"ts":1378343534342,"patch":[[{"diffs":[[0,"lue =  ("],[-1," ("],[0," value.R"]],"start1":4355,"start2":4355,"length1":18,"length2":16},{"diffs":[[0,"* 100):0"],[-1,")"],[0,";\n      "]],"start1":4470,"start2":4470,"length1":17,"length2":16}]],"length":15460,"saved":false}
{"ts":1378343555023,"patch":[[{"diffs":[[0,"                "],[1," //"],[0," table.setCell(i"]],"start1":4483,"start2":4483,"length1":32,"length2":35},{"diffs":[[0,"); // %\n"],[1,"                    table.setCell(i, 6, '' + v); // %\n\n"],[0,"        "]],"start1":4647,"start2":4647,"length1":16,"length2":71}]],"length":15518,"saved":false}
{"ts":1378343659647,"patch":[[{"diffs":[[0,"); // %\n"],[1,"                    value = \"<div style='color:red'>\" + v + \"</div>\";\n"],[0,"        "]],"start1":4647,"start2":4647,"length1":16,"length2":86}]],"length":15588,"saved":false}
{"ts":1378343697878,"patch":[[{"diffs":[[0,"d'>\" + v"],[1,"alue"],[0," + \"</di"]],"start1":4704,"start2":4704,"length1":16,"length2":20}]],"length":15592,"saved":false}
{"ts":1378343701556,"patch":[[{"diffs":[[0,", '' + v"],[1,"alue"],[0,"); // %\n"]],"start1":4767,"start2":4767,"length1":16,"length2":20}]],"length":15596,"saved":false}
{"ts":1378343758247,"patch":[[{"diffs":[[0,"\n            };\n"],[1,"            \n            var colorCodeForValue = function(value) {\n                \n            };\n"],[0,"    \n           "]],"start1":8820,"start2":8820,"length1":32,"length2":131}]],"length":15695,"saved":false}
{"ts":1378343842356,"patch":[[{"diffs":[[0,"                "],[1,"if (value >= 80)\n                    return 'green';\n                if (value >= 75 && value < 80)\n                    return 'yellow';\n                else\n                    return 'red';"],[0,"\n            };\n"]],"start1":8903,"start2":8903,"length1":32,"length2":223}]],"length":15886,"saved":false}
{"ts":1378343914215,"patch":[[{"diffs":[[0,"   var v"],[-1,"alue"],[0," =  ( va"]],"start1":4346,"start2":4346,"length1":20,"length2":16},{"diffs":[[0,"le='"],[-1,"color:red"],[1,"background-color:\" + colorCodeForValue(v) + \""],[0,"'>\" + v"],[-1,"alue"],[0," + \""]],"start1":4688,"start2":4688,"length1":28,"length2":60}]],"length":15914,"saved":false}
{"ts":1378343962777,"patch":[[{"diffs":[[0," style='"],[1,"color:white;"],[0,"backgrou"]],"start1":4684,"start2":4684,"length1":16,"length2":28}]],"length":15926,"saved":false}
{"ts":1378343971794,"patch":[[{"diffs":[[0,"100):0;\n"],[1,"                    v = 78;\n"],[0,"        "]],"start1":4468,"start2":4468,"length1":16,"length2":44}]],"length":15954,"saved":false}
{"ts":1378344043732,"patch":[[{"diffs":[[0,"le='"],[-1,"color:white;background-color:"],[0,"\" + "]],"start1":4716,"start2":4716,"length1":37,"length2":8}]],"length":15925,"saved":false}
{"ts":1378344069712,"patch":[[{"diffs":[[0,"return '"],[1,"color:white;background-color:"],[0,"green';\n"]],"start1":8995,"start2":8995,"length1":16,"length2":45}]],"length":15954,"saved":false}
{"ts":1378344097404,"patch":[[{"diffs":[[0,"return '"],[1,"color:black;background-color:"],[0,"yellow';"]],"start1":9107,"start2":9107,"length1":16,"length2":45},{"diffs":[[0,"rn '"],[1,"color:white;background-color:"],[0,"red'"],[-1,";"],[0,"\n   "]],"start1":9198,"start2":9198,"length1":13,"length2":41}]],"length":16011,"saved":false}
{"ts":1378344126972,"patch":[[{"diffs":[[0,"v = "],[-1,"7"],[0,"8"],[1,"2"],[0,";\n  "]],"start1":4496,"start2":4496,"length1":10,"length2":10}]],"length":16011,"saved":false}
{"ts":1378344153651,"patch":[[{"diffs":[[0,":0;\n"],[-1,"                    v = 82;\n"],[0,"    "]],"start1":4472,"start2":4472,"length1":36,"length2":8}]],"length":15983,"saved":false}
{"ts":1378344208658,"patch":[[{"diffs":[[0,"        return '"],[1,"text-aling:center;"],[0,"color:white;back"]],"start1":8959,"start2":8959,"length1":32,"length2":50}]],"length":16001,"saved":false}
{"ts":1378344212136,"patch":[[{"diffs":[[0,"text-ali"],[-1,"n"],[0,"g"],[1,"n"],[0,":center;"]],"start1":8975,"start2":8975,"length1":18,"length2":18}]],"length":16001,"saved":false}
{"ts":1378344238089,"patch":[[{"diffs":[[0,"    return '"],[1,"text-align:center;"],[0,"color:black;"]],"start1":9093,"start2":9093,"length1":24,"length2":42},{"diffs":[[0,"return '"],[1,"text-align:center;"],[0,"color:wh"]],"start1":9202,"start2":9202,"length1":16,"length2":34}]],"length":16037,"saved":false}
{"ts":1378344272222,"patch":[[{"diffs":[[0,"); // %\n"],[1,"                    v = 82;\n"],[0,"        "]],"start1":4643,"start2":4643,"length1":16,"length2":44}]],"length":16065,"saved":false}
{"ts":1378344301286,"patch":[[{"diffs":[[0,"/ %\n"],[-1,"                    v = 82;\n"],[0,"    "]],"start1":4647,"start2":4647,"length1":36,"length2":8}]],"length":16037,"saved":false}
{"ts":1378344503584,"patch":[[{"diffs":[[0,"teration"],[-1," Name"],[0,"', 'Star"]],"start1":5311,"start2":5311,"length1":21,"length2":16},{"diffs":[[0,"tart"],[-1," Date"],[0,"', 'End"],[-1," Date"],[0,"', '"]],"start1":5324,"start2":5324,"length1":25,"length2":15},{"diffs":[[0,"Plan Est"],[-1,"imate"],[1,"."],[0,"', 'Actu"]],"start1":5339,"start2":5339,"length1":21,"length2":17}]],"length":16018,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378468021262,"patch":[[{"diffs":[[0,"d Burn']"],[-1,","],[0,"\n       "]],"start1":5409,"start2":5409,"length1":17,"length2":16},{"diffs":[[0,"        "],[1," //"],[0," 'width'"]],"start1":5429,"start2":5429,"length1":16,"length2":19}]],"length":16020,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378671005645,"patch":[[{"diffs":[[0,"'End', 'Plan"],[1,"<br>"],[0," Est.', 'Act"]],"start1":5331,"start2":5331,"length1":24,"length2":28}]],"length":16024,"saved":false}
{"ts":1378671317778,"patch":[[{"diffs":[[0," 'Actual"],[-1," Vel."],[1,"<br>Velocity"],[0,"', 'Plan"]],"start1":5354,"start2":5354,"length1":21,"length2":28},{"diffs":[[0,"'Planned"],[-1," "],[1,"<br>"],[0,"Vel.', '"]],"start1":5377,"start2":5377,"length1":17,"length2":20}]],"length":16034,"saved":false}
{"ts":1378671350690,"patch":[[{"diffs":[[0,"l<br>Vel"],[-1,"ocity"],[1,"."],[0,"', 'Plan"]],"start1":5361,"start2":5361,"length1":21,"length2":17},{"diffs":[[0,"'%', 'Actual"],[-1," "],[1,"<br>"],[0,"Burn', 'Plan"]],"start1":5392,"start2":5392,"length1":25,"length2":28},{"diffs":[[0,"n', 'Planned"],[-1," "],[1,"<br>"],[0,"Burn']\n     "]],"start1":5411,"start2":5411,"length1":25,"length2":28}]],"length":16036,"saved":false}
{"ts":1378671526202,"patch":[[{"diffs":[[0,"ss + \"'>\" + "],[1,"("],[0,"value.Actual"]],"start1":4865,"start2":4865,"length1":24,"length2":25},{"diffs":[[0,"e.ActualBurndown"],[1,"!=undefined ? value.ActualBurndown :\"\")"],[0," + \"</span>\"); /"]],"start1":4882,"start2":4882,"length1":32,"length2":71},{"diffs":[[0,"enText'>\" + "],[1,"("],[0,"value.Planne"]],"start1":5027,"start2":5027,"length1":24,"length2":25},{"diffs":[[0,"Burndown"],[1,"!=undefined ? value.PlannedBurndown :\"\")"],[0," + \"</sp"]],"start1":5053,"start2":5053,"length1":16,"length2":56}]],"length":16117,"saved":false}
{"ts":1378671602032,"patch":[[{"diffs":[[0,"r {\n        "],[1,"/*"],[0,"width: 550px"]],"start1":15532,"start2":15532,"length1":24,"length2":26},{"diffs":[[0,"idth: 550px;"],[1,"*/"],[0,"\n    }\n    \n"]],"start1":15547,"start2":15547,"length1":24,"length2":26}]],"length":16121,"saved":false}
{"ts":1378671639968,"patch":[[{"diffs":[[0,"\n               "],[1," //"],[0," chart.resize(55"]],"start1":3011,"start2":3011,"length1":32,"length2":35}]],"length":16124,"saved":false}
{"ts":1378672296906,"patch":[[{"diffs":[[0,"100):0;\n"],[1,"                    // add % label\n                    v = v + \"%\";\n"],[0,"        "]],"start1":4471,"start2":4471,"length1":16,"length2":84}]],"length":16192,"saved":false}
{"ts":1378672507670,"patch":[[{"diffs":[[0,"\"201"],[-1,"2.11.19"],[1,"3.9.8"],[0,"\" />"]],"start1":345,"start2":345,"length1":15,"length2":13}]],"length":16190,"saved":false}
{"contributors":[],"silentsave":false,"ts":1378746240117,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"v = v + "]],"start1":4524,"start2":4524,"length1":16,"length2":18},{"diffs":[[0,"\"'>\" + v"],[1," +\"%\""],[0," + \"</di"]],"start1":4790,"start2":4790,"length1":16,"length2":21}]],"length":16197,"saved":false}
{"ts":1378746300513,"patch":[[{"diffs":[[0,"\"2013.9."],[-1,"8"],[1,"9"],[0,"\" />\n  <"]],"start1":345,"start2":345,"length1":17,"length2":17}]],"length":16197,"saved":false}
