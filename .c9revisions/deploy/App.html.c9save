{"ts":1377112251064,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1377112257870,"patch":[[{"diffs":[[1,"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<!-- Copyright (c) 2012 Rally Software Development Corp. All rights reserved -->\n<html>\n<head>\n  <title>Planned vs Actual Burndown</title>\n  <meta name=\"Name\" content=\"App: Planned vs Actual Burndown\" />\n  <meta name=\"Version\" content=\"2012.11.19\" />\n  <meta name=\"Vendor\" content=\"Rally Software\" />\n\n  <script type =\"text/javascript\" src=\"https://rally1.rallydev.com/apps/1.32/sdk.js\"></script>\n  <script type =\"text/javascript\">\n    function PlannedVsActualBurndown() {\n        this.display = function() {\n            dojo.require(\"dojox.charting.Chart2D\");\n            var iterations = {};\n            var waiter, releaseDropdown, aggregatedTable, chart;\n    \n            var showLegend = function() {\n                dojo.byId(\"legendDiv\").innerHTML =\n                        \"<div class='blue box'></div> Actual Burndown&nbsp;&nbsp;&nbsp;<div class='green box'></div> Planned Burndown\";\n            };\n    \n            var buildLineChart = function() {\n                var labels = [];\n                var plannedBurndown = [];\n                var actualBurndownPast = [];\n                var actualBurndownFuture = [];\n                var zeros = [];\n    \n                var i = 1;\n                var futureCount = 0;\n                rally.forEach(iterations, function(value) {\n                    labels.push({value: i, text: value.Name});\n                    plannedBurndown.push(value.PlannedBurndown);\n                    if (value.IsFuture && futureCount === 0) {  // past/future plot point\n                        futureCount = 1;\n                        actualBurndownPast.push(value.ActualBurndown);\n                        actualBurndownFuture.push(value.ActualBurndown);\n                    } else if (value.IsFuture && futureCount > 0) {  // future plot points\n                        actualBurndownPast.push(null);\n                        actualBurndownFuture.push(value.ActualBurndown);\n                    } else { // past plot points\n                        actualBurndownPast.push(value.ActualBurndown);\n                        actualBurndownFuture.push(null);\n                    }\n                    zeros.push(0);\n                    i++;\n                });\n    \n                chart = new dojox.charting.Chart2D(\"lineChartDiv\");\n                chart.addPlot(\"default\", {type: \"Lines\"});\n                chart.addAxis(\"x\", {labels: labels});\n                chart.addAxis(\"y\", {vertical: true});\n                chart.addSeries(\"Planned Burndown\", plannedBurndown, {stroke: {color:\"#666666\", style: \"LongDash\"}});\n                chart.addSeries(\"Actual Burndown Past\", actualBurndownPast, {stroke: {color:\"#5C9ACB\"}});\n                chart.addSeries(\"Actual Burndown Future\", actualBurndownFuture, {stroke: {color:\"#5C9ACB\", style: \"LongDash\"}});\n                chart.addSeries(\"Zero Axis\", zeros, {stroke: {color:\"black\", width:1}});\n                chart.render();\n                chart.resize(550,300);\n    \n                showLegend();\n            };\n    \n            var populateTable = function(table) {\n                function formatDate(date) {\n                    if (date === \"\") {\n                        return \"\";\n                    }\n                    return dojo.date.locale.format(dojo.date.stamp.fromISOString(date.replace(/Z/, \"\")), {datePattern: \"yyyy-MM-dd\", selector: \"date\"});\n                }\n    \n                var i = 0;\n                rally.forEach(iterations, function(value) {\n                    var colorClass = value.IsFuture ? \"greyText\" : \"blueText\";\n                    console.log(value.ActualVelocity , value.Resources)\n                    table.setCell(i, 0, value.Name + \"(\" + value.Project + \")\");\n                    table.setCell(i, 1, formatDate(value.StartDate));\n                    table.setCell(i, 2, formatDate(value.EndDate));\n                    table.setCell(i, 3, '' + value.PlanEstimate);   // planEstimate\n                    table.setCell(i, 4, '' + value.ActualVelocity); // ActualVelocity\n                    table.setCell(i, 5, '' + value.Resources);      // PlannedVelocity\n                    //table.setCell(i, 6, '' + ( value.PlanEstimate > 0 ? Math.round( ( value.ActualVelocity / value.PlanEstimate) * 100):0));\n                    table.setCell(i, 6, '' + ( ( value.Resources != null && value.Resources > 0 ) ? Math.round( ( value.ActualVelocity / value.Resources ) * 100):0)); // %\n                    table.setCell(i, 7, \"<span class='\" + colorClass + \"'>\" + value.ActualBurndown + \"</span>\"); // ActualBurndown\n                    table.setCell(i, 8, \"<span class='greenText'>\" + value.PlannedBurndown + \"</span>\"); // PlannedBurndown\n                    i++;\n                });\n            };\n    \n            var showTable = function(releasePlanEstimate) {\n                var aggregatedTableConfig = {\n                    'sortingEnabled': false,\n                    'columnKeys'    : ['Iteration Name', 'Start Date', 'End Date', 'Plan Estimate', 'Actual Vel.', 'Planned Vel.', '%', 'Actual Burn', 'Planned Burn'],\n                    'width'         : '550px'\n                };\n                aggregatedTable = new rally.sdk.ui.Table(aggregatedTableConfig);\n                populateTable(aggregatedTable);\n                waiter.hide();\n                dojo.byId('planEstimateDiv').innerHTML = 'Release Plan Estimate: ' + releasePlanEstimate;\n                dojo.byId(\"legendDiv\").style.display = \"\";\n                dojo.byId(\"planEstimateDiv\").style.display = \"\";\n                dojo.byId(\"aggregatedDataDiv\").style.display = \"\";\n                aggregatedTable.display(\"aggregatedDataDiv\");\n    \n                buildLineChart();\n            };\n    \n            var aggregateBurndown = function(releasePlanEstimate) {\n                function getRallyDate(jsDate) {\n                    var yr = jsDate.getUTCFullYear();\n                    var mon = (\"0\" + (jsDate.getUTCMonth() + 1));\n                    var day = (\"0\" + jsDate.getUTCDate()).substr(-2);\n                    var hr = (\"0\" + jsDate.getUTCHours()).substr(-2);\n                    var min = (\"0\" + jsDate.getUTCMinutes()).substr(-2);\n                    var sec = (\"0\" + jsDate.getUTCSeconds()).substr(-2);\n    \n                    return       yr +\n                            \"-\" + mon.substr(mon.length - 2, 2) +\n                            \"-\" + day.substr(day.length - 2, 2) +\n                            \"T\" + hr + \":\" + min + \":\" + sec;\n                }\n    \n                var actualBurndown, plannedBurndown, future, lastPlannedVelocity, lastActualVelocity;\n                var today = getRallyDate(new Date());\n                var i = 1;\n    \n                rally.forEach(iterations, function(value) {\n                    if (i === 1) {                               // first iteration\n                        actualBurndown = releasePlanEstimate;\n                        plannedBurndown = releasePlanEstimate;\n                        future = value.EndDate >= today;\n                    } else if (value.Name === \"Release\") {       //release row\n                        if (future) {\n                            actualBurndown -= lastPlannedVelocity;\n                            plannedBurndown -= lastPlannedVelocity;\n                        } else {\n                            actualBurndown -= lastActualVelocity;\n                            plannedBurndown -= lastPlannedVelocity;\n                        }\n                    } else if (value.EndDate >= today) {         // future iteration\n                        actualBurndown -= lastPlannedVelocity;\n                        plannedBurndown -= lastPlannedVelocity;\n                        future = true;\n                    } else if (value.EndDate < today) {         // past iteration\n                        actualBurndown -= lastActualVelocity;\n                        plannedBurndown -= lastPlannedVelocity;\n                        future = false;\n                    }\n                    lastPlannedVelocity = value.Resources;\n                    lastActualVelocity = value.ActualVelocity;\n    \n                    iterations[value.Name].ActualBurndown = actualBurndown;\n                    iterations[value.Name].PlannedBurndown = plannedBurndown;\n                    iterations[value.Name].IsFuture = future;\n                    console.log(\"value\",value);\n                    i++;\n                });\n    \n                showTable(releasePlanEstimate);\n            };\n    \n            var aggregateData = function(results) {\n                var releasePlanEstimate = 0;\n                var allStoriesDefectsDefectSuites = results.stories;\n                allStoriesDefectsDefectSuites = allStoriesDefectsDefectSuites.concat(results.defects);\n                allStoriesDefectsDefectSuites = allStoriesDefectsDefectSuites.concat(results.defectSuites);\n    \n                dojo.forEach(allStoriesDefectsDefectSuites, function(item) { //aggregate story, defect, & defect suite data\n                    var estimate = item.PlanEstimate || 0;\n    \n                    iterations[item.Iteration.Name].PlanEstimate += estimate;\n                    releasePlanEstimate += estimate;\n                    if (item.ScheduleState === 'Accepted') {\n                        iterations[item.Iteration.Name].ActualVelocity += estimate;\n                    }\n                });\n    \n                aggregateBurndown(releasePlanEstimate);\n            };\n    \n            var makeIterationObjects = function(results) {\n                dojo.forEach(results.iterations, function(iteration) {\n                    var resources = iteration.Resources || 0;\n                    if (iterations[iteration.Name]) {\n                        resources = resources + iterations[iteration.Name].Resources;\n                    }\n    \n                    iterations[iteration.Name] = {\n                        _ref:           iteration._ref,\n                        Name:           iteration.Name ,\n                        StartDate:      iteration.StartDate,\n                        EndDate:        iteration.EndDate,\n                        Resources:      resources,\n                        PlanEstimate:   0,\n                        ActualVelocity: 0,\n                        ActualBurndown: 0,\n                        PlannedBurndown:0,\n                        IsFuture:       \"\",\n                        Project: iteration.Project.Name};\n                });\n    \n                iterations.Release = {\n                    _ref:           \"\",\n                    Name:           \"Release\",\n                    StartDate:      \"\",\n                    EndDate:        \"\",\n                    Resources:      \"\",\n                    PlanEstimate:   \"\",\n                    ActualVelocity: \"\",\n                    ActualBurndown: 0,\n                    PlannedBurndown:0,\n                    IsFuture:       \"\"};\n    \n    \n                aggregateData(results);\n            };\n    \n            function clearComponents() {\n                dojo.byId(\"legendDiv\").style.display = \"none\";\n                dojo.byId(\"planEstimateDiv\").style.display = \"none\";\n                dojo.byId(\"aggregatedDataDiv\").style.display = \"none\";\n    \n                waiter.display(\"waiter\");\n                iterations = {};\n    \n                if (chart) {\n                    chart.destroy();\n                }\n    \n                if (aggregatedTable) {\n                    aggregatedTable.destroy();\n                    aggregatedTable = null;\n                }\n            }\n    \n            function releaseSelected() {\n                clearComponents();\n    \n                var queryConfig = [];\n                var typeArray = ['hierarchicalrequirement','Defect','DefectSuite'];\n                var keyArray = ['stories','defects','defectSuites'];\n    \n                dojo.forEach(typeArray, function(query, i) {\n                    queryConfig.push({\n                        type : typeArray[i],\n                        key  : keyArray[i],\n                        query:  rally.sdk.util.Query.and(['Iteration.StartDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                            'Iteration.StartDate <= \"' + releaseDropdown.getSelectedEnd() + '\"']).or(\n                                rally.sdk.util.Query.and(['Iteration.EndDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                                    'Iteration.EndDate <= \"' + releaseDropdown.getSelectedEnd() + '\"'])),\n                        fetch: 'Name,Iteration,ScheduleState,PlanEstimate,Project'\n                    });\n                });\n    \n                queryConfig.push({\n                    type : 'Iterations',\n                    key  : 'iterations',\n                    query:  rally.sdk.util.Query.and(['StartDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                        'StartDate <= \"' + releaseDropdown.getSelectedEnd() + '\"']).or(\n                            rally.sdk.util.Query.and(['EndDate >= \"' + releaseDropdown.getSelectedStart() + '\"',\n                                'EndDate <= \"' + releaseDropdown.getSelectedEnd() + '\"'])),\n                    fetch: 'Name,Resources,StartDate,EndDate,Project',\n                    order: 'EndDate'\n                });\n    \n                rallyDataSource.findAll(queryConfig, makeIterationObjects);\n            }\n    \n            rally.sdk.ui.AppHeader.setHelpTopic(\"240\");\n            rally.sdk.ui.AppHeader.showPageTools(true);\n    \n            rallyDataSource = new rally.sdk.data.RallyDataSource('__WORKSPACE_OID__',\n                    '__PROJECT_OID__',\n                    '__PROJECT_SCOPING_UP__',\n                    '__PROJECT_SCOPING_DOWN__');\n    \n            releaseDropdown = new rally.sdk.ui.ReleaseDropdown({}, rallyDataSource);\n    \n            waiter = new rally.sdk.ui.basic.Wait({hideTarget:false});\n            waiter.display(\"waiter\");\n    \n            dojo.addOnLoad(function() {  //executes when dojo requirements are loaded\n                releaseDropdown.display(\"dropdownDiv\", releaseSelected);\n            });\n        };\n    }\n  </script>\n\n  <style type=\"text/css\">\n        .box {\n        display: inline-block;\n        height: 10px;\n        width: 10px;\n    }\n    \n    .blue {\n        background-color: #5C9ACB;\n    }\n    \n    .green {\n        background-color: #666666;\n    }\n    \n    .greenText {\n        color: #666666;\n    }\n    \n    .blueText {\n        color: #5C9ACB;\n    }\n    \n    .greyText {\n        color: #999999;\n    }\n    \n    #aggregatedDataDiv,\n    #legendDiv {\n        padding-top: 10px;\n    }\n    \n    #lineChartDiv,\n    #planEstimateDiv,\n    #legendDiv,\n    #waiter {\n        width: 550px;\n    }\n    \n    #planEstimateDiv,\n    #legendDiv {\n        text-align: right;\n        font-size: 12px;\n    }\n  </style>\n\n  <script type=\"text/javascript\">\n    function onLoad() {\n      var appCustom = new PlannedVsActualBurndown();\n      appCustom.display();\n    }\n\n    rally.addOnLoad(onLoad);\n  </script>\n</head>\n\n<body>\n  <div id=\"waiter\"></div>\n  <div id=\"releaseDiv\"></div>\n  <div id=\"dropdownDiv\"></div>\n\n  <div id=\"legendDiv\"></div>\n  <div id=\"lineChartDiv\"></div>\n  <div id=\"planEstimateDiv\"></div>\n  <div id=\"aggregatedDataDiv\"></div>\n</body>\n</html>\n"]],"start1":0,"start2":0,"length1":0,"length2":15309}]],"length":15309,"saved":false}
